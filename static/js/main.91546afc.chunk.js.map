{"version":3,"sources":["pages/page1.js","pages/page2.js","components/BottomNav.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Page1","Page2","BottomNav","useState","value","setValue","Paper","sx","position","bottom","left","right","elevation","Box","BottomNavigation","showLabels","onChange","event","newValue","BottomNavigationAction","label","icon","Restore","Favorite","LocationOn","App","path","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process"],"mappings":"uOAOeA,EAPD,WACV,OACI,mCACI,2CCIGC,EAPD,WACV,OACI,mCACI,2C,mECyBGC,EAxBG,WAChB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,OACE,cAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,SAAU,QAASC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,GACpDC,UAAW,EAFb,SAIE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEC,YAAU,EACVX,MAAOA,EACPY,SAAU,SAACC,EAAOC,GAChBb,EAASa,IAJb,UAOE,cAACC,EAAA,EAAD,CAAwBC,MAAM,UAAUC,KAAM,cAACC,EAAA,EAAD,MAC9C,cAACH,EAAA,EAAD,CAAwBC,MAAM,YAAYC,KAAM,cAACE,EAAA,EAAD,MAChD,cAACJ,EAAA,EAAD,CAAwBC,MAAM,SAASC,KAAM,cAACG,EAAA,EAAD,c,MCExCC,MAhBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,aCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAuCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MChGjE,IDoByBjB,ECRVkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SF0CxBhC,EADW,UAAMiC,gBAAN,sBACY/B,GE9BzBkB,M","file":"static/js/main.91546afc.chunk.js","sourcesContent":["const Page1 = () => {\r\n    return(\r\n        <>\r\n            <div>Page1</div>\r\n        </>\r\n    )\r\n}\r\nexport default Page1","const Page2 = () => {\r\n    return(\r\n        <>\r\n            <div>Page2</div>\r\n        </>\r\n    )\r\n}\r\nexport default Page2","import { useState } from \"react\";\r\nimport { Paper, Box, BottomNavigationAction, BottomNavigation } from \"@mui/material/\";\r\nimport { Restore, Favorite, LocationOn } from \"@mui/icons-material/\";\r\n\r\nconst BottomNav = () => {\r\n  const [value, setValue] = useState(0);\r\n  return (\r\n    <Paper\r\n      sx={{ position: \"fixed\", bottom: 0, left: 0, right: 0 }}\r\n      elevation={3}\r\n    >\r\n      <Box>\r\n        <BottomNavigation\r\n          showLabels\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n        >\r\n          <BottomNavigationAction label=\"Recents\" icon={<Restore />} />\r\n          <BottomNavigationAction label=\"Favorites\" icon={<Favorite />} />\r\n          <BottomNavigationAction label=\"Nearby\" icon={<LocationOn />} />\r\n        </BottomNavigation>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default BottomNav;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Page1 from \"./pages/page1\";\nimport Page2 from \"./pages/page2\";\nimport BottomNav from \"./components/BottomNav\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <BottomNav />\n      <Switch>\n        <Route path=\"/page1\">\n          <Page1 />\n        </Route>\n        <Route path=\"/page2\">\n          <Page2 />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  //   // The URL constructor is available in all browsers that support SW.\n  //   const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n  //   if (publicUrl.origin !== window.location.origin) {\n  //     // Our service worker won't work if PUBLIC_URL is on a different origin\n  //     // from what our page is served on. This might happen if a CDN is used to\n  //     // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n  //     return;\n  //   }\n\n  //   window.addEventListener('load', () => {\n  //     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n  //     if (isLocalhost) {\n  //       // This is running on localhost. Let's check if a service worker still exists or not.\n  //       checkValidServiceWorker(swUrl, config);\n\n  //       // Add some additional logging to localhost, pointing developers to the\n  //       // service worker/PWA documentation.\n  //       navigator.serviceWorker.ready.then(() => {\n  //         console.log(\n  //           'This web app is being served cache-first by a service ' +\n  //             'worker. To learn more, visit https://cra.link/PWA'\n  //         );\n  //       });\n  //     } else {\n  //       // Is not localhost. Just register service worker\n  //       registerValidSW(swUrl, config);\n  //     }\n  //   });\n  // }\n  const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  registerValidSW(swUrl, config);\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n//serviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}